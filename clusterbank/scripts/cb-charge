#!/usr/bin/env python

import sys
from optparse import OptionParser

from clusterbank.scripting import CBOption
import clusterbank.models as models
from clusterbank.models import Charge, Request

parser = OptionParser(option_class=CBOption)
parser.add_option(
    "-l", "--list",
    dest="list", action="store_true", default=False,
    help="list charges")
parser.add_option(
    "-u", "--user",
    dest="user", type="user",
    help="charge/list as USER", metavar="USER")
parser.add_option(
    "-p", "--project",
    dest="project", type="project",
    help="list charges on PROJECT", metavar="PROJECT")
parser.add_option(
    "-r", "--resource",
    dest="resource", type="resource",
    help="list charges for RESOURCE", metavar="RESOURCE")
parser.add_option(
    "-n", "--liens",
    dest="liens", type="liens",
    help="charge against LIENS", metavar="LIENS")
parser.add_option(
    "-t", "--time",
    type="int", dest="time",
    help="request UNITS of time on the resource", metavar="UNITS")
parser.add_option(
    "-e", "--explanation",
    dest="explanation", type="string",
    help="EXPLANATION of the request", metavar="EXPLANATION")

if __name__ == "__main__":
    (options, args) = parser.parse_args()
    
    if not options.user:
        print >> sys.stderr, "You must supply a user."
        sys.exit(1)
    user = options.user
    
    if options.list:
        # list options:
        # user -- user whose project to list charges of (required)
        # project -- project to list charges of
        # resource -- resource to list charges for
        # lien -- lien to list charges for
        charges = Charge.query().join(["lien", "allocation", "request"])
        if options.project:
            if not user.can_refund and not user.member_of(options.project):
                print >> sys.stderr, "%s cannot list charges for %s." % (user, options.project)
                sys.exit(1)
            charges = charges.filter_by(project=options.project)
        else:
            charges = charges.filter(Request.c.project_id.in_([project.id for project in user.projects]))
        if options.resource:
            charges = charges.filter_by(resource=options.resource)
        if options.liens:
            charges = charges.filter(Charge.c.lien_id.in_([lien.id for lien in options.liens]))
        
        charges = (
            charge for charge in charges
            if charge.active
        )
        
        for charge in charges:
            print charge.id, charge
        
    else:
        # create options:
        # user -- user doing the charge (required)
        # liens -- lien(s) to charge (required)
        # time -- amount of time to charge
        # explanation -- explanation for the charge
        
        if not options.liens:
            print >> sys.stderr, "You must supply a lien."
            sys.exit(1)
        
        kwargs = dict(
            liens = options.liens,
        )
        if options.time is not None:
            kwargs['time'] = options.time
        if options.explanation is not None:
            kwargs['explanation'] = options.explanation
        
        charges = user.charge(**kwargs)
        try:
            models.lxr.objectstore.flush()
        except (user.NotPermitted, ValueError, options.lien.project.InsufficientFunds), e:
            for charge in charges:
                charge.delete()
            models.lxr.objectstore.flush(charges)
            print >> sys.stderr, e
            sys.exit(1)
        for charge in charges:
            print charge.id, charge
