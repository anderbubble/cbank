#!/usr/bin/env python
from django.core.management import setup_environ
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    print >> sys.stderr, "Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things." % __file__
    print >> sys.stderr, "You'll have to run django-admin.py, passing it your settings module."
    print >> sys.stedrr, "(If the file settings.py does indeed exist, it's causing an ImportError somehow.)"
    sys.exit(1)
else:
    setup_environ(settings)

import sys

from optparse import OptionParser
from clusterbank.scripting import CBOption
from clusterbank.models import Charge

parser = OptionParser(option_class=CBOption)
parser.add_option(
    "-l", "--list",
    dest="list", action="store_true", default=False,
    help="list charges")
parser.add_option(
    "-u", "--user",
    dest="user", type="user",
    help="charge/list as USER", metavar="USER")
parser.add_option(
    "-p", "--project",
    dest="project", type="project",
    help="list charges on PROJECT", metavar="PROJECT")
parser.add_option(
    "-r", "--resource",
    dest="resource", type="resource",
    help="list charges for RESOURCE", metavar="RESOURCE")
parser.add_option(
    "-n", "--liens",
    dest="liens", type="liens",
    help="charge against LIENS", metavar="LIENS")
parser.add_option(
    "-t", "--time",
    type="int", dest="time",
    help="request UNITS of time on the resource", metavar="UNITS")
parser.add_option(
    "-e", "--explanation",
    dest="explanation", type="string",
    help="EXPLANATION of the request", metavar="EXPLANATION")

if __name__ == "__main__":
    (options, args) = parser.parse_args()
    
    if not options.user:
        print >> sys.stderr, "You must supply a user."
        sys.exit(1)
    user = options.user
    
    if options.list:
        # list options:
        # user -- user whose project to list charges of (required)
        # project -- project to list charges of
        # resource -- resource to list charges for
        # lien -- lien to list charges for
        charges = Charge.objects.all()
        if options.project:
            if not user.can_refund and not user.member_of(options.project):
                print >> sys.stderr, "%s cannot list charges for %s." % (user, options.project)
                sys.exit(1)
            charges = charges.filter(lien__allocation__request__project=options.project)
        else:
            charges = charges.filter(lien__allocation__request__project__in=user.project_set)
        if options.resource:
            charges = charges.filter(lien__allocation__request__resource=options.resource)
        if options.liens:
            charges = charges.filter(lien__in=options.liens)
        charges = (charge for charge in charges if charge.active)
        for charge in charges:
            print charge.id, charge
        
    else:
        # create options:
        # user -- user doing the charge (required)
        # liens -- lien(s) to charge (required)
        # time -- amount of time to charge
        # explanation -- explanation for the charge
        
        if not options.liens:
            print >> sys.stderr, "You must supply a lien."
            sys.exit(1)
        
        kwargs = dict(
            liens=options.liens)
        if options.time is not None:
            kwargs['time'] = options.time
        if options.explanation is not None:
            kwargs['explanation'] = options.explanation
        
        try:
            charges = user.charge(**kwargs)
        except user.NotPermitted, e:
            print >> sys.stderr, e
            sys.exit(1)
        except options.lien.project.InsufficientFunds, e:
            print >> sys.stderr, e
            sys.exit(1)
        
        saved_charges = list()
        for charge in charges:
            try:
                charge.save()
            except ValueError, e:
                for charge in saved_charges:
                    charge.delete()
                print >> sys.stderr, e
                sys.exit(1)
            else:
                saved_charges.append(charge)
        for charge in saved_charges:
            print charge.id, charge
