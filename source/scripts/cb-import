#!/usr/bin/env python

import sys
import time
from datetime import datetime

import clusterbank.model
from clusterbank.model import User, Resource, Lien, Charge

admin = User.by_name("janderso")
resource = Resource.by_name("bgl")

def parse (line):
    date, record_type, job_id, data = line.strip().split(";")
    date = datetime.strptime(date, "%m/%d/%Y %H:%M:%S")
    job_id = int(job_id)
    data = dict(pair.split("=") for pair in data.split(" ") if pair.count("=") == 1)
    data['user'] = User.by_name(data['user'])
    data['qtime'] = datetime.strptime(data['qtime'], "%Y%m%d%H%M%S")
    data['stime'] = datetime.strptime(data['stime'], "%Y%m%d%H%M%S")
    data['etime'] = datetime.strptime(data['etime'], "%Y%m%d%H%M%S")
    data['reqwalltime'] = int(data['reqwalltime'])
    return date, record_type, job_id, data

def record (line):
    if Lien.query.filter_by(explanation=line).count() > 0:
        raise Exception("already recorded '%s'" % line)
    
    date, record_type, job_id, data = parse(line)
    user = data['user']
    
    if len(list(user.projects)) != 1:
        raise Exception("can't determine project for '%s'" % user)
    
    user.can_lien = True
    
    liens = Lien(
        poster = user,
        project = user.projects[0],
        resource = resource,
        datetime = data['qtime'],
        time = data['reqwalltime'],
        explanation = line,
    )
    
    charges = Charge(
        poster = admin,
        liens = liens,
        time = (data['etime'] - data['stime']).seconds / 60,
        explanation = line,
    )
    
    try:
        clusterbank.model.Session.flush()
    except:
        for charge in charges:
            clusterbank.model.Session.delete(charge)
        for lien in liens:
            clusterbank.model.Session.delete(lien)
        clusterbank.model.Session.flush()        
        clusterbank.model.Session.clear()
        raise

if __name__ == "__main__":
    imported = 0
    failed = 0
    
    try:
        for line in sys.stdin:
            try:
                record(line)
            except NameError:
                raise
            except Exception, e:
                print >> sys.stderr, e
                sys.stdout.write(line)
                failed += 1
            else:
                imported += 1
    except KeyboardInterrupt:
        pass
    
    print >> sys.stderr, "%i records imported" % imported
    print >> sys.stderr, "%i records failed" % failed
