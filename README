Clusterbank is a system for storing allocations, holds, and charges for
computational resources.

== features ==

 * plugin architecture for accessing existing directory services
 * complete user- and admin-level command-line interface (cbank)
 * clean SQLAlchemy-based API

== upstream plugins ==

clusterbank uses a system called "upstream" to access existing entities:
 * users
 * projects
 * resources

Each entity must have a unique name and a canonical and immutable numeric id.

Also tracked are the relationships between these entities:
 * project membership -- users M:M projects
 * project administration -- users M:M projects

The upstream interface is explicitly designed to be easy to implement as a
drop-in replacement for the upstream module provided with clusterbank. A
clusterbank upstream module must define the following functions:

get_project_id (project_name) => project_id || None
get_project_name (project_id) => project_name || None
get_project_members (project_id) => [user_id_1, user_id_2, ..., user_id_n]
get_project_admins (project_id) => [user_id_1, user_id_2, ..., user_id_n]
get_resource_id (resource_name) => resource_id || None
get_resource_name (resource_id) => resource_name || None
get_user_id (user_name) => user_id || None
get_user_name (user_id) => user_name || None
get_member_projects (user_id) => [project_id_1, project_id_2, ..., project_id_n]
get_admin_projects (user_id) => [project_id_1, project_id_2, ..., project_id_n]

Two example upstream modules are supplied with clusterbank:
 * clusterbank.upstreams.default -- memory-only, used for testing
 * clusterbank.upstreams.posix -- derives users from /etc/passwd, projects and resources from /etc/group

The upstream module to be used is specified in clusterbank.conf as the
"module" setting in the [upstream] section.
