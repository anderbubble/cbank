#!/usr/bin/env python

import sys
from datetime import datetime
from optparse import OptionParser

from clusterbank.scripting import CBOption
import clusterbank.models as models
from clusterbank.models import Request, Allocation

parser = OptionParser(option_class=CBOption)
parser.add_option(
    "-l", "--list",
    dest="list", action="store_true", default=False,
    help="list charges")
parser.add_option(
    "-u", "--user",
    dest="user", type="user",
    help="allocate as USER", metavar="USER")
parser.add_option(
    "-p", "--project",
    dest="project", type="project",
    help="list charges on PROJECT", metavar="PROJECT")
parser.add_option(
    "-r", "--resource",
    dest="resource", type="resource",
    help="list charges for RESOURCE", metavar="RESOURCE")
parser.add_option(
    "-q", "--request",
    dest="request", type="request",
    help="allocate for REQUEST", metavar="REQUEST")
parser.add_option(
    "-t", "--time",
    dest="time", type="int",
    help="allocate UNITS of time on the resource", metavar="UNITS")
parser.add_option(
    "-c", "--credit-limit",
    dest="credit", type="int",
    help="set up a credit limit of UNITS of time", metavar="UNITS")
parser.add_option(
    "-s", "--start",
    dest="start", type="date",
    help="allocate resources starting at DATE", metavar="DATE")
parser.add_option(
    "-x", "--expiration",
    dest="expiration", type="date",
    help="specify an expiration at DATE", metavar="DATE")
parser.add_option(
    "-e", "--explanation",
    dest="explanation", type="string",
    help="EXPLANATION of the request", metavar="EXPLANATION")

if __name__ == "__main__":
    (options, args) = parser.parse_args()
    
    if not options.user:
        print >> sys.stderr, "You must supply a user."
        sys.exit(1)
    user = options.user
    
    if options.list:
        # list options:
        # user -- user whose project to list allocations for (required)
        # project -- project to list allocations for
        # resource -- resource to list allocations for
        # request -- request to list allocations for
        allocations = Allocation.query().join("request")
        if options.project:
            if not user.can_lien and not user.member_of(options.project):
                # Any user who can post liens can list allocations.
                # Otherwise, user must have project membership.
                print >> sys.stderr, "%s cannot list allocations for %s." % (user, options.project)
                sys.exit(1)
            allocations = allocations.filter_by(project=options.project)
        else:
            allocations = allocations.filter(Request.c.project_id.in_([project.id for project in user.projects]))
        if options.resource:
            allocations = allocations.filter_by(resource=options.resource)
        if options.request:
            allocations = allocations.filter_by(request=options.request)
        
        allocations = (
            allocation for allocation in allocations
            if allocation.active
        )
        
        for allocation in allocations:
            print allocation.id, allocation
    
    else:
        # create options:
        # user -- user allocating the request (required)
        # request -- request to allocation time for (required)
        # time -- time to allocate
        # start -- date the allocation becomes active (required)
        # expiration -- specify an expiration date (required)
        # explanation -- explanation of the allocation
        
        if not options.request:
            print >> sys.stderr, "You must supply a request."
            sys.exit(1)
        if not options.start:
            print >> sys.stderr, "You must supply a start date."
            sys.exit(1)
        if not options.expiration:
            print >> sys.stderr, "You must supply an expiration date."
            sys.exit(1)
        
        # Create the new allocation.
        kwargs = dict(
            request = options.request,
            start = options.start,
            expiration = options.expiration,
        )
        if options.time is not None:
            kwargs['time'] = options.time
        allocation = user.allocate(**kwargs)
        try:
            models.lxr.objectstore.flush()
        except (user.NotPermitted, ValueError), e:
            print >> sys.stderr, e
            sys.exit(1)
        
        # Set up a line of credit.
        if options.credit is not None:
            kwargs = dict(
                resource = allocation.resource,
                project = allocation.project,
                start = allocation.start,
                explanation = allocation.explanation,
                time = options.credit,
            )
            credit_limit = user.allocate_credit(**kwargs)
            try:
                models.lxr.objectstore.flush()
            except (user.NotPermitted, ValueError), e:
                allocation.delete()
                models.lxr.objectstore.flush([allocation])
                print >> sys.stderr, e
                sys.exit(1)
        
        print allocation.id, allocation
