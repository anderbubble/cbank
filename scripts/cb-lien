#!/usr/bin/env python

import sys
from datetime import datetime
from optparse import OptionParser

import clusterbank.models as models
from clusterbank.models import Project, Request, Lien
from clusterbank.scripting import CBOption

parser = OptionParser(option_class=CBOption)
parser.add_option(
    "-l", "--list",
    dest="list", action="store_true", default=False,
    help="list charges")
parser.add_option(
    "-u", "--user",
    dest="user", type="user",
    help="post as USER", metavar="USER")
parser.add_option(
    "-a", "--allocation",
    dest="allocation", type="allocation",
    help="post lien against ALLOCATION", metavar="ALLOCATION")
parser.add_option(
    "-p", "--project",
    dest="project", type="project",
    help="post lien against PROJECT", metavar="PROJECT")
parser.add_option(
    "-r", "--resource",
    dest="resource", type="resource",
    help="post lien for RESOURCE", metavar="RESOURCE")
parser.add_option(
    "-t", "--time",
    type="int", dest="time",
    help="request UNITS of time on the resource", metavar="UNITS")
parser.add_option(
    "-e", "--explanation",
    dest="explanation", type="string",
    help="EXPLANATION of the request", metavar="EXPLANATION")

if __name__ == "__main__":
    (options, args) = parser.parse_args()
    
    if not options.user:
        print >> sys.stderr, "You must supply a user."
        sys.exit(1)
    user = options.user
    
    if options.list:
        # list options:
        # user -- user whose projects to list liens on (required)
        # project -- project to list liens on
        # resource -- resource to list liens for
        liens = Lien.query().join(["allocation", "request"])
        if options.project:
            if not user.can_charge and not user.member_of(options.project):
                print >> sys.stderr, "%s cannot list liens for %s." % (user, options.project)
                sys.exit(1)
            liens = liens.filter_by(project=options.project)
        else:
            liens = liens.filter(Request.c.project_id.in_([project.id for project in user.projects]))
        if options.resource:
            liens = liens.filter_by(resource=options.resource)
        if options.allocation:
            liens = liens.filter_by(allocation=options.allocation)
        
        liens = (
            lien for lien in liens
            if lien.active and lien.open
        )
        
        for lien in liens:
            print lien.id, lien
    
    else:
        # create options:
        # user -- user creating the lien (required)
        # allocation -- allocation for the lien (required for standard lien)
        # project -- project of the lien (required for smart lien)
        # resource -- resource of the lien (required for smart lien)
        # time -- maximum charge of the lien
        # explanation -- explanation for the lien
        
        if not options.allocation:
            if not options.project:
                print >> sys.stderr, "You must supply a project or allocation."
                sys.exit(1)
            if not options.resource:
                print >> sys.stderr, "You must supply a resource or allocation."
                sys.exit(1)
        if not options.time:
            print >> sys.stderr, "You must supply time for the lien."
            sys.exit(1)
        
        kwargs = dict(
            project = options.project,
            resource = options.resource,
            allocation = options.allocation,
            time = options.time,
        )
        if options.explanation is not None:
            kwargs['explanation'] = options.explanation
        
        lien = user.lien(**kwargs)
        try:
            liens = list(lien)
        except TypeError:
            liens = [lien]
        
        try:
            models.lxr.objectstore.flush()
        except (user.NotPermitted, Project.InsufficientFunds, ValueError), e:
            for lien in liens:
                lien.delete()
            print >> sys.stderr, e
            sys.exit(1)
        
        for lien in liens:
            print lien.id, lien
